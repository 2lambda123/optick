#pragma once
#include "Common.h"
#include "Concurrency.h"
#include "Serialization.h"

namespace Profiler
{
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct EventDescription;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class EventDescriptionBoard
{
	CriticalSection lock;
	std::vector<EventDescription*> board;
	static EventDescriptionBoard instance;
public:
	uint32 Register(EventDescription& description);

	static EventDescriptionBoard& Get();

	void SetSamplingFlag(int index, bool flag);
	bool HasSamplingEvents() const;

	const std::vector<EventDescription*>& GetEvents() const;
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
OutputDataStream& operator << ( OutputDataStream& stream, const EventDescriptionBoard& ob);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

